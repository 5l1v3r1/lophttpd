lots of performance httpd
=========================

lophttpd was written to demonstrate (to myself) that it is possible
to have a webserver running in a single thread and handling multiple
connections at the same time. The ammount of connections is only limited by the
OS's maximum number of open files per process and by your CPU/network
speed.

Scheduling of connections is done in user-space by lophttpd. It uses
sendfile(2) call and caching to get its good download performance.

lophttpd can be used to serv heavy loaded sites to deliver static content:
To serve software/package repositories, update servers, content delivery
networks, ISO's, large image and video databases, tarballs etc.

Features:

+ runs as unprived user in a chroot
+ does not require syslogd
+ supports multiple logproviders ("mmap" is very fast)
+ only handles static content (e.g. no CGI scripts etc)
+ runs in a single process
+ integrated auto indexing support
+ integrated vhost support
+ can operate behind reverse proxy with -B

You should run lophttpd as root. Then it chroots itself to the
"-R" parameter given on the commandline and drops the privileges
to that of the user given via "-u". It runs on port "-p".
If you add "-i" to the commandline, it generates an index file
(in memory) for the web-root recursively. The user specified via -u
must have the permissions to walk the webroot, otherwise
you will get wrong results. If you use "-i", you probably want
to copy the icons/ directory to your webroot, to have a pretty
output. The icons are not by me, I grabbed them from some distro
and they seem to be public domain.

"-H" enables vhosts.

For every vhost you need to create a subdir of name

 vhost<vhost-name>[:vhost-port]

If port is 80 it should be omitted. For example if you
have a vhost 127.0.0.1:8080 and your webroot is /srv/www/htdocs
and you want to use autoindexing, create the subdir

 vhost127.0.0.1:8080

in /srv/www/htdocs and run

 # ./lhttpd -R /srv/www/htdocs -i -H -p 8080

Users can browse "127.0.0.1:8080" then. Whatever they type in the address field
of their browser can be appended to "vhost" and created as a subdir.
lophttpd will serve this as a vhost as long as your DNS resolves
to the IP address where lophttpd is running.

Default log-location is /var/log/lophttpd. If you change this, take care
that your logfile is located outside the chroot cage.

You can run lophttpd as normal user on a port >= 1024, but this is INSECURE!
It does not drop privs/chroot then. The aim is to quickly exchange some
ISO's or tarballs in a separated, secure LAN between friends.

If you change something in the webroot while lophttpd is running,
e.g. you use autoindexing and copy new files to webroot or
delete files from there, you need to tell lophttpd by sending
it a SIGUSR1 signal. It will drop its open file caches and
generates new indexes.

If lhttpd experiances that the generated indexes exceed a certain limit,
(default 10,000 bytes per dir) it writes the appropriate index.html to disk
inside the directory. It wont overwrite exising files. But creation of
large index files makes sense, otherwise it would need to keep 100's
of MB inside RAM. Since lhttpd is walking the webroot as root when
generating the index, take care that users dont create large FS-trees
so that lhttpd is forced to generate junk.
Generating indexes for large directories, containing 100k of files, can
take some time. If the "-q" parameter is passed, generated indexes
are NOT written to disk and logs are not written. This is to run in a clean
mode on Android devices without leaving any trace if you do forensics
on the device, since lophttpd allows you to download whole partitions
as block devices.

Since version 0.82 lophttpd contains an experimental feature to
speed up logging. Since writing 1000's of logs per second can
be a bottleneck, lophttpd introduces different log providers
which you can choose via -L.
By default it is "file" which means the normal behavior. You can
also say "mmap". Then it is using a mmap-backed buffer which speeds
up logging. "aio" is also spupported which uses the POSIX realtime
aio_ calls. However this could lead to drops of messages if
under very heavy load. Remember that lophttpd is still single threaded,
even with different log providers. (For aio to be really
single threaded you may want to check out my Linux aio implementation
since glibc is using pthreads under the hood.)

Since version 0.86 lophttpd supports multicore setups for Linux.
If run without any -n switch, lophttpd will run one process per core.
You can turn this off by using "-n 1" or you specify the number
of cores you want lophttpd to use. In general, "-n 1" is a good idea,
since even if under heavy load, you rarely need more than one core
for lophttpd.

Since version 0.88 lophttpd has one logfile per core. If you run on two
cores you get "logfile.0" and "logfile.1". This way we avoid file locking.
lophttpd is now also using localtime instead of gmtime in the logs,
so take care to have the right TZ environment variable set when starting
lhttpd or it will use UTC.

If you use multicore support, every process will have its own cache
for open files and stats. Do not run lhttpd on large read-only directories w/o
index.html and autoindexing since it needs to keep a big cache about
indexing information in memory then (per core!). This does not happen
if the directory is writable since lophttpd will dump content into a
index.html file if above a certain threshold.

Since version > 0.91 lophttpd also supports IPv6, by simply using "-6"
commandline switch. The default bind goes to "::0" then, so
if you want to bind to a specific IPv6 address, you have to
add -I switch *after* -6. You can either run IPv4 or IPv6 in once
instance, not both. But you can run two lophttpd's: one with IPv4
and one with IPv6 if needed.

If you operate lophhtpd behind a proxy, you can use the '-B string'
argument so it automatically generates <base href="string"> argument
which should be your proxy URL: http://proxy:port/path/.
The base string must end with '/' character and the index which lhttpd
generates is relative to this base. -B makes only sense with -i.

lophttpd also serves block device files. You need to run it as
root (-u root) or as the user who can open the block dev files. This
is not really for production use, (keep the security implications in mind
if running as root) but its sometimes useful on embedded devices.

If you have ideas and or offer performance/testing environment please
drop me an email: sebastian.krahmer [at] gmail [dot] com :-)

